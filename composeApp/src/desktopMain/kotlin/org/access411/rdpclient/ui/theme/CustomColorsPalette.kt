package org.access411.rdpclient.ui.theme

import androidx.compose.runtime.Immutable
import androidx.compose.runtime.compositionLocalOf
import androidx.compose.ui.graphics.Color

@Immutable
data class CustomColorsPalette(
    val primary: Color = Color.Unspecified,
    val onPrimary: Color = Color.Unspecified,
    val primaryContainer: Color = Color.Unspecified,
    val onPrimaryContainer: Color = Color.Unspecified,
    val secondary: Color = Color.Unspecified,
    val onSecondary: Color = Color.Unspecified,
    val secondaryContainer: Color = Color.Unspecified,
    val onSecondaryContainer: Color = Color.Unspecified,
    val tertiary: Color = Color.Unspecified,
    val onTertiary: Color = Color.Unspecified,
    val onTertiaryContainer: Color = Color.Unspecified,
    val error: Color = Color.Unspecified,
    val errorContainer: Color = Color.Unspecified,
    val onError: Color = Color.Unspecified,
    val onErrorContainer: Color = Color.Unspecified,
    val background: Color = Color.Unspecified,
    val onBackground: Color = Color.Unspecified,
    val surface: Color = Color.Unspecified,
    val onSurface: Color = Color.Unspecified,
    val surfaceVariant: Color = Color.Unspecified,
    val onSurfaceVariant: Color = Color.Unspecified,
    val outline: Color = Color.Unspecified,
    val inverseOnSurface: Color = Color.Unspecified,
    val inverseSurface: Color = Color.Unspecified,
    val inversePrimary: Color = Color.Unspecified,
    val shadow: Color = Color.Unspecified,
    val surfaceTint: Color = Color.Unspecified,
    val outlineVariant: Color = Color.Unspecified,
    val scrim: Color = Color.Unspecified,
    val quaternary: Color = Color.Unspecified,
    val onQuaternary: Color = Color.Unspecified,
    val quaternaryContainer: Color = Color.Unspecified,
    val onQuaternaryContainer: Color = Color.Unspecified,
    val buttonVariant: Color = Color.Unspecified,
    val onButtonVariant: Color = Color.Unspecified,
    val buttonVariantContainer: Color = Color.Unspecified,
    val onButtonVariantContainer: Color = Color.Unspecified
)

// <editor-fold desc="Light Colors">
val LightPrimary = Color(0xFF00639C)
val LightOnPrimary = Color(0xFFFFFFFF)
val LightPrimaryContainer = Color(0xFFCEE5FF)
val LightOnPrimaryContainer = Color(0xFF001D33)
val LightSecondary = Color(0xFF51606F)
val LightOnSecondary = Color(0xFFFFFFFF)
val LightSecondaryContainer = Color(0xFFD5E4F7)
val LightOnSecondaryContainer = Color(0xFF0E1D2A)
val LightTertiary = Color(0xFF006496)
val LightOnTertiary = Color(0xFFFFFFFF)
val LightTertiaryContainer = Color(0xFFCBE6FF)
val LightOnTertiaryContainer = Color(0xFF001E31)
val LightError = Color(0xFFBA1A1A)
val LightErrorContainer = Color(0xFFFF3925)
val LightOnError = Color(0xFFFFFFFF)
val LightOnErrorContainer = Color(0xFF410002)
val LightBackground = Color(0xFFFCFCFF)
val LightOnBackground = Color(0xFF1A1C1E)
val LightSurface = Color(0xFFFCFCFF)
val LightOnSurface = Color(0xFF1A1C1E)
val LightSurfaceVariant = Color(0xFFDEE3EB)
val LightOnSurfaceVariant = Color(0xFF42474E)
val LightOutline = Color(0xFF72777F)
val LightInverseOnSurface = Color(0xFFF1F0F4)
val LightInverseSurface = Color(0xFF2F3033)
val LightInversePrimary = Color(0xFF97CBFF)
val LightShadow = Color(0xFF000000)
val LightSurfaceTint = Color(0xFF00639C)
val LightOutlineVariant = Color(0xFFC2C7CF)
val LightScrim = Color(0xFF000000)
val LightQuaternary = Color(0xFF006495)
val LightOnQuaternary = Color(0xFFFFFFFF)
val LightQuaternaryContainer = Color(0xFFCBE6FF)
val LightOnQuaternaryContainer = Color(0xFF001E30)
val LightButtonVariant = Color(0xFF7D5700)
val LightOnButtonVariant = Color(0xFFFFFFFF)
val LightButtonVariantContainer = Color(0xFFFFDEAA)
val LightOnButtonVariantContainer = Color(0xFF271900)
// </editor-fold>

// <editor-fold desc="Dark Colors">
val DarkPrimary = Color(0xFF97CBFF)
val DarkOnPrimary = Color(0xFF003354)
val DarkPrimaryContainer = Color(0xFF004A77)
val DarkOnPrimaryContainer = Color(0xFFCEE5FF)
val DarkSecondary = Color(0xFFB9C8DA)
val DarkOnSecondary = Color(0xFF243240)
val DarkSecondaryContainer = Color(0xFF3A4857)
val DarkOnSecondaryContainer = Color(0xFFD5E4F7)
val DarkTertiary = Color(0xFF90CDFF)
val DarkOnTertiary = Color(0xFF003350)
val DarkTertiaryContainer = Color(0xFF004B72)
val DarkOnTertiaryContainer = Color(0xFFCBE6FF)
val DarkError = Color(0xFFFFB4AB)
val DarkErrorContainer = Color(0xFF93000A)
val DarkOnError = Color(0xFF690005)
val DarkOnErrorContainer = Color(0xFFFFDAD6)
val DarkBackground = Color(0xFF1A1C1E)
val DarkOnBackground = Color(0xFFE2E2E5)
val DarkSurface = Color(0xFF1A1C1E)
val DarkOnSurface = Color(0xFFE2E2E5)
val DarkSurfaceVariant = Color(0xFF42474E)
val DarkOnSurfaceVariant = Color(0xFFC2C7CF)
val DarkOutline = Color(0xFF8C9199)
val DarkInverseOnSurface = Color(0xFF1A1C1E)
val DarkInverseSurface = Color(0xFFE2E2E5)
val DarkInversePrimary = Color(0xFF00639C)
val DarkShadow = Color(0xFF000000)
val DarkSurfaceTint = Color(0xFF97CBFF)
val DarkOutlineVariant = Color(0xFF42474E)
val DarkScrim = Color(0xFF000000)
val DarkQuaternary = Color(0xFF8FCDFF)
val DarkOnQuaternary = Color(0xFF003450)
val DarkQuaternaryContainer = Color(0xFF004B71)
val DarkOnQuaternaryContainer = Color(0xFFCBE6FF)
val DarkButtonVariant = Color(0xFFFFBA2F)
val DarkOnButtonVariant = Color(0xFF422C00)
val DarkButtonVariantContainer = Color(0xFF5F4100)
val DarkOnButtonVariantContainer = Color(0xFFFFDEAA)
// </editor-fold>

// <editor-fold desc="Defining Color Palettes">
val LightCustomColorPalette = CustomColorsPalette(
    primary = LightPrimary,
    onPrimary = LightOnPrimary,
    primaryContainer = LightPrimaryContainer,
    onPrimaryContainer = LightOnPrimaryContainer,
    secondary = LightSecondary,
    onSecondary = LightOnSecondary,
    secondaryContainer = LightSecondaryContainer,
    onSecondaryContainer = LightOnSecondaryContainer,
    tertiary = LightTertiary,
    onTertiary = LightOnTertiary,
    onTertiaryContainer = LightOnTertiaryContainer,
    error = LightError,
    errorContainer = LightErrorContainer,
    onError = LightOnError,
    onErrorContainer = LightOnErrorContainer,
    background = LightBackground,
    onBackground = LightOnBackground,
    surface = LightSurface,
    onSurface = LightOnSurface,
    surfaceVariant = LightSurfaceVariant,
    onSurfaceVariant = LightOnSurfaceVariant,
    outline = LightOutline,
    inverseOnSurface = LightInverseOnSurface,
    inverseSurface = LightInverseSurface,
    inversePrimary = LightInversePrimary,
    shadow = LightShadow,
    surfaceTint = LightSurfaceTint,
    outlineVariant = LightOutlineVariant,
    scrim = LightScrim,
    quaternary = LightQuaternary,
    onQuaternary = LightOnQuaternary,
    quaternaryContainer = LightQuaternaryContainer,
    onQuaternaryContainer = LightOnQuaternaryContainer,
    buttonVariant = LightButtonVariant,
    onButtonVariant = LightOnButtonVariant,
    buttonVariantContainer = LightButtonVariantContainer,
    onButtonVariantContainer = LightOnButtonVariantContainer,
)

val DarkCustomColorPalette = CustomColorsPalette(
    primary = DarkPrimary,
    onPrimary = DarkOnPrimary,
    primaryContainer = DarkPrimaryContainer,
    onPrimaryContainer = DarkOnPrimaryContainer,
    secondary = DarkSecondary,
    onSecondary = DarkOnSecondary,
    secondaryContainer = DarkSecondaryContainer,
    onSecondaryContainer = DarkOnSecondaryContainer,
    tertiary = DarkTertiary,
    onTertiary = DarkOnTertiary,
    onTertiaryContainer = DarkOnTertiaryContainer,
    error = DarkError,
    errorContainer = DarkErrorContainer,
    onError = DarkOnError,
    onErrorContainer = DarkOnErrorContainer,
    background = DarkBackground,
    onBackground = DarkOnBackground,
    surface = DarkSurface,
    onSurface = DarkOnSurface,
    surfaceVariant = DarkSurfaceVariant,
    onSurfaceVariant = DarkOnSurfaceVariant,
    outline = DarkOutline,
    inverseOnSurface = DarkInverseOnSurface,
    inverseSurface = DarkInverseSurface,
    inversePrimary = DarkInversePrimary,
    shadow = DarkShadow,
    surfaceTint = DarkSurfaceTint,
    outlineVariant = DarkOutlineVariant,
    scrim = DarkScrim,
    quaternary = DarkQuaternary,
    onQuaternary = DarkOnQuaternary,
    quaternaryContainer = DarkQuaternaryContainer,
    onQuaternaryContainer = DarkOnQuaternaryContainer,
    buttonVariant = DarkButtonVariant,
    onButtonVariant = DarkOnButtonVariant,
    buttonVariantContainer = DarkButtonVariantContainer,
    onButtonVariantContainer = DarkOnButtonVariantContainer,
)
// </editor-fold>

val LocalAppColors = compositionLocalOf { CustomColorsPalette() }